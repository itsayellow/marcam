#!/usr/bin/env python3

import sys
import os
import struct
import time
import array
from PIL import Image
import biorad1sc_reader


def recurse_report(coll_item, tablevel, file):
    tab = " "*4*tablevel
    for region in coll_item:
        print(tab + "Region: %s (%s)"%(region, coll_item[region]['type']),
                file=file)
        data_raw = coll_item[region]['raw']
        data_proc = coll_item[region]['proc']
        data_interp = coll_item[region]['interp']
        print(tab + " type_num: " + repr(coll_item[region]['type_num']),
                file=file)
        if data_proc is not None:
            print(tab + " data_proc: " + repr(data_proc), file=file)
        if type(data_interp) is dict:
            recurse_report(data_interp, tablevel+1, file)
        elif data_interp is not None:
            print(tab + " data_interp: " + repr(data_interp), file=file)
        else:
            pass
        if data_proc is None and data_interp is None:
            print(tab + " data_raw: " + repr(data_raw), file=file)


def convert_file(filename):
    # get full path to filename, and its dir
    filename = os.path.realpath(filename)
    filedir = os.path.dirname(filename)

    # open output text file to write info
    try:
        out_fh = open(os.path.join(filedir,"dump.txt"),"w")
    except:
        print("Error opening dump.txt", file=sys.stderr)
        raise

    # new reader object
    reader1sc = biorad1sc_reader.Reader(filename)

    img_summary = reader1sc.get_img_summary()
    print("get_img_summary:", file=out_fh)
    print(img_summary, file=out_fh)

    file_metadata = reader1sc.get_metadata()
    print("get_metadata:", file=out_fh)
    for collection in file_metadata:
        print("\nCollection: %s"%collection, file=out_fh)
        coll = file_metadata[collection]
        for item in coll:
            print(" "*4 + "Item: %s"%item, file=out_fh)
            coll_item = coll[item]
            recurse_report(coll_item, 2, out_fh)

    (img_x, img_y, img_data) = reader1sc.get_img_data(invert=True)
    print("get_img_data:", file=out_fh)
    print(img_x, file=out_fh)
    print(img_y, file=out_fh)
    print(len(img_data), file=out_fh)
    print(min(img_data), file=out_fh)
    print(max(img_data), file=out_fh)

    # output plain tiff
    print("test1.tif", file=sys.stderr)
    reader1sc.save_img_as_tiff(
            os.path.join(filedir, "test1.tif"),
            invert=True
            )

    # output scaled tiff
    print("test1sc1.0.tif", file=sys.stderr)
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc1.0.tif"),
            invert=True
            )

    # output scaled tiff
    print("test1sc0.6.tif", file=sys.stderr)
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.6.tif"),
            imgsc=0.6,
            invert=True
            )

    # output scaled tiff
    print("test1sc0.4.tif", file=sys.stderr)
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.4.tif"),
            imgsc=0.4,
            invert=True
            )

    # output scaled tiff
    print("test1sc0.2.tif", file=sys.stderr)
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.2.tif"),
            imgsc=0.2,
            invert=True
            )

    # output 16-bit tiff test gradient
    gradx = 1000
    grady = 1000
    img_data=[]
    min_ = 0
    max_ = 2**16-1
    for i in range(gradx*grady):
        img_data.append(int(i/(gradx*grady)*(max_-min_) + min_))
    img_data_pilbytes = array.array("H",img_data).tobytes() 
    img_out = Image.new('I;16',(gradx,grady))
    img_out.frombytes(img_data_pilbytes)
    img_out.save("gradient.tif")


def main(args):
    for filename in args:
        convert_file(filename)


if __name__ == "__main__":
    main(sys.argv[1:])
    exit(0)
