#!/usr/bin/env python3

import sys
import os
import struct
import time
import biorad1sc_reader
from PIL import Image


def convert_to_pil(in16bit):
    """
    PIL interprets binary data internally as u32
    PIL asks for externally i32
    So to give PIL what will be u32 inside, we need to convert
    number -> binary u32, interpret binary u32 as i32
    """
    # in16bit       min  0     mid 2**15    max 2**16-1
    #               0x0000        0x8000         0xffff
    # outcrap  min       0   mid 2**31-1         max -1
    #          0x0000_0000   0x8000_0000    0xffff_ffff
    in32bit = [x*(2**16-1) for x in in16bit]
    in32uint = [struct.pack("<I",x) for x in in32bit]
    outpil = [struct.unpack("<i",x)[0] for x in in32uint]
    return outpil


def convert_file(filename):
    # get full path to filename, and its dir
    filename = os.path.realpath(filename)
    filedir = os.path.dirname(filename)

    # open output text file to write info
    try:
        out_fh = open(os.path.join(filedir,"dump.txt"),"w")
    except:
        print("Error opening dump.txt", file=sys.stderr)
        raise

    # new reader object
    reader1sc = biorad1sc_reader.Reader(filename)

    img_meta = reader1sc.get_img_metadata()
    print(img_meta, file=out_fh)

    (img_x, img_y, img_data) = reader1sc.get_img_data(invert=True)
    print(img_x, file=out_fh)
    print(img_y, file=out_fh)
    print(len(img_data), file=out_fh)
    print(min(img_data), file=out_fh)
    print(max(img_data), file=out_fh)

    # output plain tiff
    reader1sc.save_img_as_tiff(
            os.path.join(filedir, "test1.tif"),
            invert=True
            )

    # output scaled tiff
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc1.0.tif"),
            invert=True
            )

    # output scaled tiff
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.6.tif"),
            imgsc=0.6,
            invert=True
            )

    # output scaled tiff
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.4.tif"),
            imgsc=0.4,
            invert=True
            )

    # output scaled tiff
    reader1sc.save_img_as_tiff_sc(
            os.path.join(filedir, "test1sc0.2.tif"),
            imgsc=0.2,
            invert=True
            )

    # output 16-bit tiff test gradient
    gradx = 1000
    grady = 1000
    img_data=[]
    min_ = 0
    max_ = 2**16
    for i in range(gradx*grady):
        img_data.append(int(i/(gradx*grady)*(max_-min_) + min_))
    img_data = convert_to_pil(img_data)
    img_out = Image.new('I',(gradx,grady))
    img_out.putdata(img_data)
    img_out.save("gradient.tif")


def main(args):
    for filename in args:
        convert_file(filename)


if __name__ == "__main__":
    main(sys.argv[1:])
    exit(0)
