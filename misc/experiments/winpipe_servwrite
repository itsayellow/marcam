#!/usr/bin/env python3

# from:
# https://stackoverflow.com/questions/48542644/python-and-windows-named-pipes

import time
import sys
import win32pipe, win32file

# https://docs.microsoft.com/en-us/windows/desktop/ipc/named-pipes
# https://docs.microsoft.com/en-us/windows/desktop/ipc/pipe-names
# https://docs.microsoft.com/en-us/windows/desktop/api/Winbase/nf-winbase-createnamedpipea
# http://timgolden.me.uk/pywin32-docs/win32pipe.html
# http://timgolden.me.uk/pywin32-docs/win32file.html

PIPE_NAME = r'\\.\pipe\Marcam-username'

def pipe_server():
    print("pipe server")
    count = 0
    pipe = win32pipe.CreateNamedPipe(
            # lpName
            # ----------
            # Unicode name of pipe.
            # Use the following form when specifying the name of a pipe in the
            # CreateFile, WaitNamedPipe, or CallNamedPipe function:
            #   \\ServerName\pipe\PipeName
            # where ServerName is either the name of a remote computer or a
            # period, to specify the local computer.  The pipe name string
            # specified by PipeName can include any character other than a
            # backslash, including numbers and special characters. The entire
            # pipe name string can be up to 256 characters long. Pipe names are
            # not case-sensitive.
            # The pipe server cannot create a pipe on another computer, so
            # CreateNamedPipe must use a period for the server name, as shown
            # in the following example.
            #   \\.\pipe\PipeName
            PIPE_NAME,
            # dwOpenMode
            # ----------
            # can be one of:
            #   PIPE_ACCESS_DUPLEX, PIPE_ACCESS_INBOUND, PIPE_ACCESS_OUTBOUND
            win32pipe.PIPE_ACCESS_DUPLEX,
            # dwPipeMode
            # ----------
            # can be one of:
            #   PIPE_TYPE_MESSAGE, PIPE_TYPE_BYTE,
            # additionally can have one of:
            #   PIPE_READMODE_MESSAGE, PIPE_READMODE_BYTE
            # additionally can have one of:
            #   PIPE_WAIT, PIPE_NOWAIT
            win32pipe.PIPE_TYPE_MESSAGE | win32pipe.PIPE_READMODE_BYTE | win32pipe.PIPE_WAIT,
            # nMaxInstances
            # -------------
            1,
            # nOutBufferSize
            # -------------
            65536,
            # nInBufferSize
            # -------------
            65536,
            # nDefaultTimeOut
            # ---------------
            # in milliseconds. 0 means "50 ms"
            0,
            # lpSecurity Attributes
            # ---------------------
            None
            )
    try:
        print("waiting for client")
        win32pipe.ConnectNamedPipe(pipe, None)
        print("got client")

        while count < 10:
            print(f"writing message {count}")
            some_data = f"count: {count}".encode(encoding='utf-8')
            win32file.WriteFile(
                    # handle to Named Pipe
                    pipe,
                    # data in bytes format
                    some_data
                    )
            time.sleep(1)
            count += 1

        print("finished now")
    finally:
        win32file.CloseHandle(pipe)


def pipe_client():
    print("pipe client")
    quit = False

    while not quit:
        try:
            handle = win32file.CreateFile(
                PIPE_NAME,
                win32file.GENERIC_READ | win32file.GENERIC_WRITE,
                0,
                None,
                win32file.OPEN_EXISTING,
                0,
                None
            )
            res = win32pipe.SetNamedPipeHandleState(handle, win32pipe.PIPE_READMODE_MESSAGE, None, None)
            if res == 0:
                print(f"SetNamedPipeHandleState return code: {res}")
            while True:
                (hr, resp_bytes) = win32file.ReadFile(handle, 64*1024)
                resp_str = resp_bytes.decode(encoding='utf-8')
                print(f"hr: {hr}    message: {resp_str}")
        except win32file.error as e:
            # https://docs.microsoft.com/en-us/windows/desktop/debug/system-error-codes--0-499-
            (winerror, funcname, strerror) = e.args
            if winerror == 2:
                # ERROR_FILE_NOT_FOUND
                #   The system cannot find the file specified
                print("no pipe, trying again in a sec")
                print("    {0}".format(winerror))
                print("    {0}".format(funcname))
                print("    {0}".format(strerror))
                time.sleep(1)
            elif winerror == 109:
                # ERROR_BROKEN_PIPE
                #   The pipe has been ended.
                print("broken pipe, bye bye")
                print("    {0}".format(winerror))
                print("    {0}".format(funcname))
                print("    {0}".format(strerror))
                quit = True
            else:
                print("Unknown Windows error:")
                print("    {0}".format(winerror))
                print("    {0}".format(funcname))
                print("    {0}".format(strerror))


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("need s or c as argument")
    elif sys.argv[1] == "s":
        pipe_server()
    elif sys.argv[1] == "c":
        pipe_client()
    else:
        print(f"no can do: {sys.argv[1]}")
